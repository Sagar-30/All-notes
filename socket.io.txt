io.on("connection", (socket) => {
    console.log("Connection made.");

    socket.on("join", (data) => {
        // Emit a welcome message to the user who joined
        socket.emit("message", { text: `Welcome, ${data.username}!` });

        // Broadcast a message to all other users in the same room
        socket.broadcast.to(data.room).emit("message", {
            text: `${data.username} has joined the room.`
        });

        // Join the room
        socket.join(data.room);
    });

    socket.on("sendMessage", async (data) => {

        // write your code here 
          const newMessage = new messageModal({
            username:data.username,
            text:data.message,
            room: data.room,
            timestamp: new Date()
          })
          await newMessage.save();
        // Broadcast the received message to all users in the same room
        io.to(data.room).emit("message", {
            username: data.username,
            text: data.message
        });
    });

    socket.on("disconnect", () => {
        console.log("Connection disconnected.");
    });
});


/////////Html file

// Event handler for the login form
        document.getElementById('login-form').addEventListener('submit', (e) => {
            e.preventDefault();
            // Get the username and room from the form
            username = document.getElementById('username-input').value;
            room = document.getElementById('room-input').value;
            
            // Hide the login container and show the chat container
            loginContainer.style.display = 'none';
            chatContainer.style.display = 'block';
            // Join the room by emitting a 'join' event
            socket.emit('join', { username, room });
        });

        // Event handler for the message form
        messageForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value;
            // Emit a 'sendMessage' event to send the message to the server
            socket.emit('sendMessage', { username, message, room });

            messageInput.value = '';
        });

        // Listen for incoming messages from the server
        socket.on('message', (message) => {
            // Display the received message in the message display area
            const messageElement = document.createElement('div');
            messageElement.innerHTML = `<strong>${message.username ? message.username + ":": ""}</strong> ${message.text}`;
            messageDisplay.appendChild(messageElement);
        });
    </script>
